import { BaseService } from './base.service';
import { API_ENDPOINTS } from '@/utils/constants';
import {
  Institution,
  InstitutionFilters,
  CreateInstitutionRequest,
  UpdateInstitutionRequest,
  InstitutionResponse,
  InstitutionsResponse,
  InstitutionAnalytics,
  InstitutionSpecificAnalytics,
} from '@/types/institution';

/**
 * Institution Service
 * Handles all institution-related API operations
 */
class InstitutionService extends BaseService {
  constructor() {
    super(API_ENDPOINTS.INSTITUTIONS.BASE);
  }

  // ========================================
  // CORE CRUD OPERATIONS
  // ========================================

  /**
   * Get all institutions with pagination and filtering
   */
  async getInstitutions(filters: InstitutionFilters = {}): Promise<InstitutionsResponse> {
    try {
      const response = await this.getPaginated<Institution>(filters);

      // Transform response to match expected InstitutionsResponse format
      if (response.success && response.data) {
        return {
          success: true,
          data: {
            institutions: response.data.data,
            pagination: response.data.pagination,
          },
          message: response.message,
        };
      }

      throw new Error(response.message || 'Failed to fetch institutions');
    } catch (error) {
      console.error('Error fetching institutions:', error);
      throw error;
    }
  }

  /**
   * Get a single institution by ID
   */
  async getInstitution(id: number): Promise<InstitutionResponse> {
    try {
      const response = await this.get<Institution>(`/${id}`);
      
      if (response.success && response.data) {
        return {
          success: true,
          data: response.data,
          message: response.message,
        };
      }

      throw new Error(response.message || 'Failed to fetch institution');
    } catch (error) {
      console.error('Error fetching institution:', error);
      throw error;
    }
  }

  /**
   * Create a new institution
   */
  async createInstitution(data: CreateInstitutionRequest): Promise<InstitutionResponse> {
    try {
      const response = await this.post<Institution>('', data);
      
      if (response.success && response.data) {
        return {
          success: true,
          data: response.data,
          message: response.message || 'Institution created successfully',
        };
      }

      throw new Error(response.message || 'Failed to create institution');
    } catch (error) {
      console.error('Error creating institution:', error);
      throw error;
    }
  }

  /**
   * Update an existing institution
   */
  async updateInstitution(id: number, data: UpdateInstitutionRequest): Promise<InstitutionResponse> {
    try {
      const response = await this.put<Institution>(`/${id}`, data);
      
      if (response.success && response.data) {
        return {
          success: true,
          data: response.data,
          message: response.message || 'Institution updated successfully',
        };
      }

      throw new Error(response.message || 'Failed to update institution');
    } catch (error) {
      console.error('Error updating institution:', error);
      throw error;
    }
  }

  /**
   * Delete an institution
   */
  async deleteInstitution(id: number): Promise<{ success: boolean; message: string }> {
    try {
      const response = await this.delete(`/${id}`);
      
      return {
        success: response.success,
        message: response.message || 'Institution deleted successfully',
      };
    } catch (error) {
      console.error('Error deleting institution:', error);
      throw error;
    }
  }

  // ========================================
  // ANALYTICS OPERATIONS
  // ========================================

  /**
   * Get analytics for all institutions
   */
  async getAnalytics(): Promise<InstitutionAnalytics> {
    try {
      const response = await this.get<InstitutionAnalytics>(API_ENDPOINTS.INSTITUTIONS.OVERVIEW_ANALYTICS);
      
      if (response.success && response.data) {
        return response.data;
      }

      throw new Error(response.message || 'Failed to fetch analytics');
    } catch (error) {
      console.error('Error fetching analytics:', error);
      throw error;
    }
  }

  /**
   * Get analytics for a specific institution
   */
  async getInstitutionAnalytics(id: number): Promise<InstitutionSpecificAnalytics> {
    try {
      const response = await this.get<InstitutionSpecificAnalytics>(API_ENDPOINTS.INSTITUTIONS.ANALYTICS(id));
      
      if (response.success && response.data) {
        return response.data;
      }

      throw new Error(response.message || 'Failed to fetch institution analytics');
    } catch (error) {
      console.error('Error fetching institution analytics:', error);
      throw error;
    }
  }

  // ========================================
  // UTILITY METHODS
  // ========================================

  /**
   * Check if institution code is available
   */
  async checkCodeAvailability(code: string, excludeId?: number): Promise<boolean> {
    try {
      const filters: InstitutionFilters = { code };
      const response = await this.getInstitutions(filters);
      
      if (response.success && response.data) {
        const institutions = response.data.institutions;
        
        if (excludeId) {
          // When updating, exclude the current institution from the check
          return !institutions.some(inst => inst.code === code && inst.id !== excludeId);
        }
        
        return institutions.length === 0;
      }
      
      return false;
    } catch (error) {
      console.error('Error checking code availability:', error);
      return false;
    }
  }

  /**
   * Validate institution data
   */
  validateInstitutionData(data: CreateInstitutionRequest | UpdateInstitutionRequest): {
    isValid: boolean;
    errors: string[];
  } {
    const errors: string[] = [];

    // Required fields validation
    if (!data.name?.trim()) {
      errors.push('Institution name is required');
    }

    if (!data.code?.trim()) {
      errors.push('Institution code is required');
    }

    if (!data.type) {
      errors.push('Institution type is required');
    }

    // Format validation
    if (data.code && !/^[A-Z0-9_-]+$/i.test(data.code)) {
      errors.push('Institution code can only contain letters, numbers, hyphens, and underscores');
    }

    if (data.contactEmail && !this.isValidEmail(data.contactEmail)) {
      errors.push('Invalid email format');
    }

    if (data.contactPhone && !this.isValidPhone(data.contactPhone)) {
      errors.push('Invalid phone number format');
    }

    if (data.website && !this.isValidURL(data.website)) {
      errors.push('Invalid website URL format');
    }

    if (data.establishedYear && (data.establishedYear < 1800 || data.establishedYear > new Date().getFullYear())) {
      errors.push('Invalid established year');
    }

    return {
      isValid: errors.length === 0,
      errors,
    };
  }

  // ========================================
  // PRIVATE HELPER METHODS
  // ========================================

  private isValidEmail(email: string): boolean {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  }

  private isValidPhone(phone: string): boolean {
    const phoneRegex = /^[+]?[\d\s\-\\()]{10,}$/;
    return phoneRegex.test(phone);
  }

  private isValidURL(url: string): boolean {
    try {
      new URL(url);
      return true;
    } catch {
      return false;
    }
  }
}

export const institutionService = new InstitutionService();
export default institutionService;
