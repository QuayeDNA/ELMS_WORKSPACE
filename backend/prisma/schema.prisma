// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================================
// CORE USER MANAGEMENT & AUTHENTICATION
// ========================================

enum UserRole {
  SUPER_ADMIN      // System-wide control, manages all institutions
  ADMIN            // Institution-level admin, manages faculty admins
  FACULTY_ADMIN    // Faculty-level admin, manages departments, exams, officers
  DEAN             // Faculty dean
  HOD              // Head of Department
  EXAMS_OFFICER    // Handles exam logistics, incidents, scheduling
  SCRIPT_HANDLER   // Manages script transit and handling
  INVIGILATOR      // Conducts exams, reports incidents
  LECTURER         // Creates exams, grades scripts, teaches courses
  STUDENT          // Takes exams, enrolled in courses
}

enum AcademicRankLevel {
  GRADUATE_ASSISTANT     // 1
  ASSISTANT_LECTURER     // 2
  LECTURER              // 3
  SENIOR_LECTURER       // 4
  PRINCIPAL_LECTURER    // 5
  ASSOCIATE_PROFESSOR   // 6
  PROFESSOR            // 7
}

enum ProgramType {
  CERTIFICATE
  DIPLOMA
  HND
  BACHELOR
  MASTERS
  PHD
}

enum ProgramLevel {
  UNDERGRADUATE
  POSTGRADUATE
}

enum EnrollmentStatus {
  ACTIVE
  DEFERRED
  GRADUATED
  WITHDRAWN
  SUSPENDED
}

enum AcademicStatus {
  GOOD_STANDING
  PROBATION
  SUSPENDED
}

enum CourseType {
  CORE
  ELECTIVE
  GENERAL
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  VISITING
}

enum EmploymentStatus {
  ACTIVE
  ON_LEAVE
  RETIRED
  TERMINATED
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

model User {
  id              Int       @id @default(autoincrement())
  email           String    @unique
  password        String
  firstName       String
  lastName        String
  middleName      String?
  title           String?   // 'Mr', 'Mrs', 'Dr', 'Prof'
  role            UserRole
  status          UserStatus @default(PENDING_VERIFICATION)
  lastLogin       DateTime?
  emailVerified   Boolean   @default(false)
  twoFactorEnabled Boolean  @default(false)
  
  // Personal information
  phone           String?
  dateOfBirth     DateTime?
  gender          String?
  nationality     String?
  address         String?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Institutional relationships
  institutionId   Int?
  institution     Institution? @relation(fields: [institutionId], references: [id])
  
  facultyId       Int?
  faculty         Faculty?     @relation(fields: [facultyId], references: [id])
  
  departmentId    Int?
  department      Department?  @relation(fields: [departmentId], references: [id])

  // Role-specific relationships
  adminProfiles     AdminProfile[]
  facultyProfiles   FacultyAdminProfile[]
  examOfficerProfiles ExamOfficerProfile[]
  scriptHandlerProfiles ScriptHandlerProfile[]
  invigilatorProfiles InvigilatorProfile[]
  lecturerProfiles    LecturerProfile[]
  studentProfiles     StudentProfile[]

  // Academic relationships (for lecturers)
  lecturerDepartments LecturerDepartment[]
  courseOfferings     CourseOffering[]
  courseLecturers     CourseLecturer[]
  
  // Student relationships
  enrollments         Enrollment[]
  studentAssessments  StudentAssessment[]
  
  // Faculty leadership
  facultiesAsDean     Faculty[] @relation("FacultyDean")
  departmentsAsHOD    Department[] @relation("DepartmentHOD")
  
  // Activity tracking
  auditLogs       AuditLog[]
  incidentsReported Incident[] @relation("ReportedBy")
  incidentsAssigned Incident[] @relation("AssignedTo")
  scriptMovements   ScriptMovement[]
  assessmentsGraded StudentAssessment[] @relation("GradedBy")

  // Indexes for performance
  @@index([institutionId, role])
  @@index([facultyId, role])
  @@index([email, status])
  @@map("users")
}

// ========================================
// ROLE-SPECIFIC PROFILES
// ========================================

model AdminProfile {
  id          Int     @id @default(autoincrement())
  userId      Int     @unique
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  permissions Json    // Flexible permissions object
  canManageFaculties Boolean @default(true)
  canManageUsers     Boolean @default(true)
  canViewAnalytics   Boolean @default(true)
  
  @@map("admin_profiles")
}

model FacultyAdminProfile {
  id          Int     @id @default(autoincrement())
  userId      Int     @unique
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  permissions Json    // Faculty-specific permissions
  canManageDepartments Boolean @default(true)
  canCreateExams      Boolean @default(true)
  canManageOfficers   Boolean @default(true)
  canViewFacultyData  Boolean @default(true)
  
  @@map("faculty_admin_profiles")
}

model ExamOfficerProfile {
  id          Int     @id @default(autoincrement())
  userId      Int     @unique
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  permissions Json    // Exam-specific permissions
  canScheduleExams    Boolean @default(true)
  canManageIncidents  Boolean @default(true)
  canAssignInvigilators Boolean @default(true)
  canManageVenues     Boolean @default(true)
  
  @@map("exam_officer_profiles")
}

model ScriptHandlerProfile {
  id          Int     @id @default(autoincrement())
  userId      Int     @unique
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  permissions Json    // Script handling permissions
  canReceiveScripts   Boolean @default(true)
  canDispatchScripts  Boolean @default(true)
  canScanQrCodes     Boolean @default(true)
  canReportIncidents Boolean @default(true)
  
  @@map("script_handler_profiles")
}

model InvigilatorProfile {
  id          Int     @id @default(autoincrement())
  userId      Int     @unique
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  permissions Json    // Invigilator permissions
  canConductExams     Boolean @default(true)
  canReportIncidents  Boolean @default(true)
  canManageScripts    Boolean @default(true)
  
  @@map("invigilator_profiles")
}

model LecturerProfile {
  id          Int     @id @default(autoincrement())
  userId      Int     @unique
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Academic staff details
  staffId     String  @unique
  academicRank AcademicRankLevel?
  employmentType EmploymentType @default(FULL_TIME)
  employmentStatus EmploymentStatus @default(ACTIVE)
  hireDate    DateTime?
  
  // Academic qualifications
  highestQualification String?
  specialization      String?
  researchInterests   String?
  
  // Contact and office info
  officeLocation      String?
  officeHours        String?
  biography          String?
  profileImageUrl    String?
  
  permissions Json    // Lecturer permissions
  canCreateExams      Boolean @default(true)
  canGradeScripts     Boolean @default(true)
  canViewResults      Boolean @default(true)
  canTeachCourses     Boolean @default(true)
  
  @@map("lecturer_profiles")
}

model StudentProfile {
  id          Int     @id @default(autoincrement())
  userId      Int     @unique
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Student academic details
  studentId   String  @unique // Student registration number
  indexNumber String? @unique
  level       Int     // 100, 200, 300, 400
  semester    Int     @default(1)
  academicYear String? // e.g., '2023/2024'
  
  // Program enrollment
  programId   Int?
  program     Program? @relation(fields: [programId], references: [id])
  admissionDate DateTime?
  expectedGraduation DateTime?
  
  // Status
  enrollmentStatus EnrollmentStatus @default(ACTIVE)
  academicStatus   AcademicStatus @default(GOOD_STANDING)
  
  // Guardian/Emergency contact
  guardianName    String?
  guardianPhone   String?
  guardianEmail   String?
  emergencyContact String? // JSON string
  
  @@map("student_profiles")
}

// ========================================
// INSTITUTIONAL STRUCTURE
// ========================================

model Institution {
  id          Int       @id @default(autoincrement())
  name        String
  code        String    @unique
  type        String    @default("UNIVERSITY") // 'UNIVERSITY', 'POLYTECHNIC', 'COLLEGE', 'OTHER'
  status      String    @default("ACTIVE") // 'ACTIVE', 'INACTIVE', 'PENDING', 'SUSPENDED'
  establishedYear Int?
  address     String?
  city        String?
  state       String?
  country     String?
  contactEmail String?
  contactPhone String?
  website     String?
  description String?
  logoUrl     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  users       User[]
  faculties   Faculty[]
  venues      Venue[]
  academicYears AcademicYear[]

  @@map("institutions")
}

model Faculty {
  id            Int         @id @default(autoincrement())
  name          String
  code          String
  description   String?
  establishedYear Int?
  
  institutionId Int
  institution   Institution @relation(fields: [institutionId], references: [id])
  
  deanId        Int?
  dean          User?       @relation("FacultyDean", fields: [deanId], references: [id])
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  users         User[]
  departments   Department[]
  exams         Exam[]

  @@unique([institutionId, code])
  @@map("faculties")
}

model Department {
  id        Int      @id @default(autoincrement())
  name      String
  code      String
  type      String   @default("department") // 'department', 'school', 'institute'
  description String?
  officeLocation String?
  contactInfo    String? // JSON string
  
  facultyId Int
  faculty   Faculty  @relation(fields: [facultyId], references: [id])
  
  hodId     Int?
  hod       User?    @relation("DepartmentHOD", fields: [hodId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users     User[]
  courses   Course[]
  programs  Program[]
  lecturerDepartments LecturerDepartment[]

  @@unique([facultyId, code])
  @@map("departments")
}

// ========================================
// ACADEMIC PROGRAMS & COURSES
// ========================================

model Program {
  id           Int         @id @default(autoincrement())
  name         String
  code         String
  type         ProgramType
  level        ProgramLevel
  durationYears Float       // e.g., 4.0, 1.5
  creditHours  Int?
  description  String?
  admissionRequirements String?
  isActive     Boolean     @default(true)
  
  departmentId Int
  department   Department  @relation(fields: [departmentId], references: [id])
  
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  students     StudentProfile[]
  programCourses ProgramCourse[]

  @@unique([departmentId, code])
  @@map("programs")
}

model ProgramPrefix {
  id          Int         @id @default(autoincrement())
  programType ProgramType @unique
  prefix      String      // e.g., "BSc", "MSc", "PhD", "HND"
  description String?
  isActive    Boolean     @default(true)
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("program_prefixes")
}

model Course {
  id           Int        @id @default(autoincrement())
  name         String
  code         String     @unique
  description  String?
  creditHours  Int        @default(3)
  contactHours Int?
  level        Int        // 100, 200, 300, 400
  courseType   CourseType @default(CORE)
  
  // Prerequisites and corequisites
  prerequisites String?   // JSON array of course codes
  corequisites  String?   // JSON array of course codes
  
  // Course content
  learningOutcomes    String?
  syllabus           String?
  assessmentMethods  String?
  recommendedBooks   String?
  
  departmentId Int
  department   Department @relation(fields: [departmentId], references: [id])
  
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  exams        Exam[]
  programCourses ProgramCourse[]
  courseOfferings CourseOffering[]

  @@map("courses")
}

// Program curriculum - many-to-many relationship
model ProgramCourse {
  id         Int     @id @default(autoincrement())
  programId  Int
  program    Program @relation(fields: [programId], references: [id], onDelete: Cascade)
  courseId   Int
  course     Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  level      Int     // 100, 200, 300, 400
  semester   Int     // 1 or 2
  isRequired Boolean @default(true)
  
  createdAt  DateTime @default(now())

  @@unique([programId, courseId, level, semester])
  @@map("program_courses")
}

// ========================================
// ACADEMIC CALENDAR & SCHEDULING
// ========================================

model AcademicYear {
  id            Int         @id @default(autoincrement())
  yearCode      String      @unique // e.g., '2023/2024'
  startDate     DateTime
  endDate       DateTime
  isCurrent     Boolean     @default(false)
  
  institutionId Int
  institution   Institution @relation(fields: [institutionId], references: [id])
  
  createdAt     DateTime    @default(now())

  semesters     Semester[]

  @@map("academic_years")
}

model Semester {
  id               Int          @id @default(autoincrement())
  academicYearId   Int
  academicYear     AcademicYear @relation(fields: [academicYearId], references: [id], onDelete: Cascade)
  
  semesterNumber   Int          // 1 or 2
  name             String       // 'First Semester', 'Second Semester'
  startDate        DateTime
  endDate          DateTime
  isCurrent        Boolean      @default(false)
  
  createdAt        DateTime     @default(now())

  courseOfferings  CourseOffering[]

  @@unique([academicYearId, semesterNumber])
  @@map("semesters")
}

// ========================================
// COURSE OFFERINGS & TEACHING
// ========================================

model CourseOffering {
  id               Int        @id @default(autoincrement())
  courseId         Int
  course           Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  semesterId       Int
  semester         Semester   @relation(fields: [semesterId], references: [id], onDelete: Cascade)
  
  primaryLecturerId Int?
  primaryLecturer   User?      @relation(fields: [primaryLecturerId], references: [id])
  
  maxEnrollment    Int?
  currentEnrollment Int       @default(0)
  classroom        String?
  schedule         String?    // JSON string for class times and days
  status           String     @default("active") // 'active', 'cancelled', 'completed'
  
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  courseLecturers  CourseLecturer[]
  enrollments      Enrollment[]
  assessments      Assessment[]

  @@unique([courseId, semesterId])
  @@map("course_offerings")
}

// Team-taught courses - many-to-many
model CourseLecturer {
  id                Int            @id @default(autoincrement())
  courseOfferingId  Int
  courseOffering    CourseOffering @relation(fields: [courseOfferingId], references: [id], onDelete: Cascade)
  lecturerId        Int
  lecturer          User           @relation(fields: [lecturerId], references: [id], onDelete: Cascade)
  
  role              String         @default("instructor") // 'instructor', 'coordinator', 'assistant'
  createdAt         DateTime       @default(now())

  @@unique([courseOfferingId, lecturerId])
  @@map("course_lecturers")
}

// Lecturer department affiliations - many-to-many
model LecturerDepartment {
  id           Int        @id @default(autoincrement())
  lecturerId   Int
  lecturer     User       @relation(fields: [lecturerId], references: [id], onDelete: Cascade)
  departmentId Int
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  
  isPrimary    Boolean    @default(false)
  role         String?    // 'member', 'coordinator', 'assistant_hod'
  createdAt    DateTime   @default(now())

  @@unique([lecturerId, departmentId])
  @@map("lecturer_departments")
}

// ========================================
// STUDENT ENROLLMENT & ACADEMIC RECORDS
// ========================================

model Enrollment {
  id                Int            @id @default(autoincrement())
  studentId         Int
  student           User           @relation(fields: [studentId], references: [id], onDelete: Cascade)
  courseOfferingId  Int
  courseOffering    CourseOffering @relation(fields: [courseOfferingId], references: [id], onDelete: Cascade)
  
  enrollmentDate    DateTime       @default(now())
  status            String         @default("enrolled") // 'enrolled', 'dropped', 'completed', 'deferred'
  grade             String?        // 'A', 'B+', 'B', 'C+', 'C', 'D+', 'D', 'F'
  gradePoints       Float?         // 4.0 scale
  attendancePercentage Float?
  
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  @@unique([studentId, courseOfferingId])
  @@map("enrollments")
}

// ========================================
// ASSESSMENT & GRADING SYSTEM
// ========================================

model AssessmentType {
  id            Int     @id @default(autoincrement())
  name          String  @unique // 'quiz', 'assignment', 'midterm', 'final', 'project'
  description   String?
  defaultWeight Float?  // Default percentage weight

  assessments   Assessment[]

  @@map("assessment_types")
}

model Assessment {
  id                Int            @id @default(autoincrement())
  courseOfferingId  Int
  courseOffering    CourseOffering @relation(fields: [courseOfferingId], references: [id], onDelete: Cascade)
  assessmentTypeId  Int
  assessmentType    AssessmentType @relation(fields: [assessmentTypeId], references: [id])
  
  title             String
  description       String?
  totalMarks        Float
  weightPercentage  Float          // Percentage of final grade
  dueDate           DateTime?
  instructions      String?
  
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  studentAssessments StudentAssessment[]

  @@map("assessments")
}

model StudentAssessment {
  id           Int        @id @default(autoincrement())
  assessmentId Int
  assessment   Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  studentId    Int
  student      User       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  score        Float?
  submittedAt  DateTime?
  gradedAt     DateTime?
  gradedById   Int?
  gradedBy     User?      @relation("GradedBy", fields: [gradedById], references: [id])
  feedback     String?
  
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([assessmentId, studentId])
  @@map("student_assessments")
}

// ========================================
// EXAMINATION MANAGEMENT
// ========================================

enum ExamStatus {
  PLANNED
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  POSTPONED
}

model Exam {
  id          Int        @id @default(autoincrement())
  title       String
  courseId    Int
  course      Course     @relation(fields: [courseId], references: [id])
  facultyId   Int
  faculty     Faculty    @relation(fields: [facultyId], references: [id])
  
  // Exam scheduling
  examDate    DateTime
  startTime   DateTime
  endTime     DateTime
  duration    Int        // Duration in minutes
  
  // Venue information
  venueId     Int?
  venue       Venue?     @relation(fields: [venueId], references: [id])
  roomId      Int?
  room        Room?      @relation(fields: [roomId], references: [id])
  
  status      ExamStatus @default(PLANNED)
  instructions String?
  specialRequirements String?
  
  // Metadata
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  createdBy   Int
  
  // Relationships
  scripts     Script[]
  incidents   Incident[]
  examSessions ExamSession[]

  @@map("exams")
}

model ExamSession {
  id        Int      @id @default(autoincrement())
  examId    Int
  exam      Exam     @relation(fields: [examId], references: [id])
  sessionDate DateTime
  startTime DateTime
  endTime   DateTime
  
  // Session management
  actualStartTime DateTime?
  actualEndTime   DateTime?
  notes          String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("exam_sessions")
}

// ========================================
// VENUE MANAGEMENT
// ========================================

model Venue {
  id            Int         @id @default(autoincrement())
  name          String
  location      String
  capacity      Int
  institutionId Int
  institution   Institution @relation(fields: [institutionId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  rooms         Room[]
  exams         Exam[]

  @@map("venues")
}

model Room {
  id        Int      @id @default(autoincrement())
  name      String
  capacity  Int
  venueId   Int
  venue     Venue    @relation(fields: [venueId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  exams     Exam[]

  @@unique([venueId, name])
  @@map("rooms")
}

// ========================================
// SCRIPT TRACKING SYSTEM
// ========================================

enum ScriptStatus {
  GENERATED
  DISTRIBUTED
  COLLECTED
  VERIFIED
  SCANNED
  DISPATCHED
  RECEIVED_FOR_GRADING
  GRADED
  RETURNED
}

model Script {
  id        Int          @id @default(autoincrement())
  qrCode    String       @unique
  studentId String       // Student registration number
  examId    Int
  exam      Exam         @relation(fields: [examId], references: [id])
  
  status    ScriptStatus @default(GENERATED)
  notes     String?
  
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  movements ScriptMovement[]
  incidents Incident[]

  // Indexes for performance
  @@index([examId, status])
  @@map("scripts")
}

enum MovementType {
  GENERATED
  DISTRIBUTED_TO_VENUE
  COLLECTED_FROM_STUDENT
  VERIFIED_BY_INVIGILATOR
  SCANNED_BY_HANDLER
  DISPATCHED_TO_GRADER
  RECEIVED_BY_GRADER
  GRADED
  RETURNED_TO_REGISTRY
}

model ScriptMovement {
  id        Int          @id @default(autoincrement())
  scriptId  Int
  script    Script       @relation(fields: [scriptId], references: [id])
  
  type      MovementType
  fromUserId Int?
  toUserId  Int?
  handledBy User?        @relation(fields: [toUserId], references: [id])
  
  location  String?
  notes     String?
  timestamp DateTime     @default(now())

  @@map("script_movements")
}

// ========================================
// INCIDENT MANAGEMENT
// ========================================

enum IncidentType {
  ACADEMIC_MISCONDUCT
  TECHNICAL_ISSUE
  MEDICAL_EMERGENCY
  MISSING_SCRIPT
  DAMAGED_SCRIPT
  LATE_ARRIVAL
  IDENTITY_VERIFICATION
  VENUE_ISSUE
  OTHER
}

enum IncidentSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum IncidentStatus {
  REPORTED
  UNDER_INVESTIGATION
  RESOLVED
  CLOSED
  ESCALATED
}

model Incident {
  id          Int              @id @default(autoincrement())
  type        IncidentType
  severity    IncidentSeverity @default(MEDIUM)
  status      IncidentStatus   @default(REPORTED)
  
  title       String
  description String
  
  // Relationships
  examId      Int?
  exam        Exam?            @relation(fields: [examId], references: [id])
  scriptId    Int?
  script      Script?          @relation(fields: [scriptId], references: [id])
  
  reportedById Int
  reportedBy   User            @relation("ReportedBy", fields: [reportedById], references: [id])
  assignedToId Int?
  assignedTo   User?           @relation("AssignedTo", fields: [assignedToId], references: [id])
  
  resolution  String?
  resolvedAt  DateTime?
  
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Indexes for performance
  @@index([examId, status])
  @@map("incidents")
}

// ========================================
// AUDIT & LOGGING
// ========================================

enum ActionType {
  CREATE
  READ
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  EXPORT
  IMPORT
}

model AuditLog {
  id        Int        @id @default(autoincrement())
  userId    Int
  user      User       @relation(fields: [userId], references: [id])
  
  action    ActionType
  entity    String     // Table/model name
  entityId  String?    // ID of the affected record
  oldValues Json?      // Previous values (for updates)
  newValues Json?      // New values (for creates/updates)
  
  ipAddress String?
  userAgent String?
  timestamp DateTime   @default(now())

  // Indexes for performance
  @@index([userId, timestamp])
  @@map("audit_logs")
}
